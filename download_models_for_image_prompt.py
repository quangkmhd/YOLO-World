#!/usr/bin/env python3
"""
Script ƒë·ªÉ t·∫£i c√°c model files c·∫ßn thi·∫øt cho YOLO-World Image Prompt Demo
Ch·∫°y script n√†y tr√™n m√°y c√° nh√¢n c√≥ k·∫øt n·ªëi internet ƒë·ªÉ t·∫£i files t·ª´ HuggingFace
"""

import os
import requests
from pathlib import Path
import hashlib
from tqdm import tqdm

def download_file(url, local_path, chunk_size=8192):
    """Download file v·ªõi progress bar"""
    print(f"Downloading: {url}")
    print(f"To: {local_path}")
    
    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    os.makedirs(os.path.dirname(local_path), exist_ok=True)
    
    response = requests.get(url, stream=True)
    response.raise_for_status()
    
    total_size = int(response.headers.get('content-length', 0))
    
    with open(local_path, 'wb') as f:
        with tqdm(total=total_size, unit='B', unit_scale=True, desc="Progress") as pbar:
            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    f.write(chunk)
                    pbar.update(len(chunk))
    
    print(f"‚úÖ Downloaded: {local_path}")
    print()

def main():
    print("üöÄ YOLO-World Image Prompt Demo - Model Downloader")
    print("=" * 60)
    
    # T·∫°o th∆∞ m·ª•c g·ªëc
    base_dir = Path("yolo_world_models")
    base_dir.mkdir(exist_ok=True)
    
    # Danh s√°ch files c·∫ßn t·∫£i
    downloads = [
        {
            "name": "YOLO-World-L Stage1 Model (FIXED URL)",
            "url": "https://huggingface.co/wondervictor/YOLO-World-V2.1/resolve/main/l_stage1-7d280586.pth",
            "path": base_dir / "pretrained_models" / "l_stage1-7d280586.pth",
            "size": "~1.4GB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Config",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/config.json",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "config.json",
            "size": "~1KB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Model",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/pytorch_model.bin",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "pytorch_model.bin",
            "size": "~600MB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Preprocessor Config",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/preprocessor_config.json",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "preprocessor_config.json",
            "size": "~1KB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Tokenizer Config",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/tokenizer_config.json",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "tokenizer_config.json",
            "size": "~1KB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Tokenizer",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/tokenizer.json",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "tokenizer.json",
            "size": "~2MB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Vocab",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/vocab.json",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "vocab.json",
            "size": "~1MB"
        },
        {
            "name": "OpenAI CLIP ViT-B/32 - Merges",
            "url": "https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/merges.txt",
            "path": base_dir / "pretrained_models" / "open-ai-clip-vit-base-patch32" / "merges.txt",
            "size": "~500KB"
        }
    ]
    
    print(f"üìã S·∫Ω t·∫£i {len(downloads)} files:")
    total_size = 0
    for item in downloads:
        print(f"  - {item['name']} ({item['size']})")
        if "GB" in item['size']:
            total_size += float(item['size'].replace('~', '').replace('GB', '')) * 1024
        elif "MB" in item['size']:
            total_size += float(item['size'].replace('~', '').replace('MB', ''))
    
    print(f"\nüìä T·ªïng dung l∆∞·ª£ng ∆∞·ªõc t√≠nh: ~{total_size:.1f}MB")
    print("\n‚ö†Ô∏è  L∆∞u √Ω: C·∫ßn k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh ƒë·ªÉ t·∫£i c√°c file l·ªõn")
    
    confirm = input("\n‚ùì B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): ").strip().lower()
    if confirm not in ['y', 'yes']:
        print("‚ùå H·ªßy t·∫£i xu·ªëng")
        return
    
    print("\nüîÑ B·∫Øt ƒë·∫ßu t·∫£i xu·ªëng...")
    print("=" * 60)
    
    success_count = 0
    failed_downloads = []
    
    for i, item in enumerate(downloads, 1):
        try:
            print(f"\n[{i}/{len(downloads)}] {item['name']}")
            
            # Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i ch∆∞a
            if item['path'].exists():
                print(f"‚è≠Ô∏è  File ƒë√£ t·ªìn t·∫°i: {item['path']}")
                success_count += 1
                continue
            
            download_file(item['url'], item['path'])
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i {item['name']}: {e}")
            failed_downloads.append(item['name'])
    
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ T·∫¢I XU·ªêNG:")
    print(f"‚úÖ Th√†nh c√¥ng: {success_count}/{len(downloads)} files")
    
    if failed_downloads:
        print(f"‚ùå Th·∫•t b·∫°i: {len(failed_downloads)} files")
        for name in failed_downloads:
            print(f"  - {name}")
    
    if success_count == len(downloads):
        print("\nüéâ T·∫£i xu·ªëng ho√†n t·∫•t!")
        print(f"üìÅ Th∆∞ m·ª•c ch·ª©a files: {base_dir.absolute()}")
        print("\nüìã H∆Ø·ªöNG D·∫™N TI·∫æP THEO:")
        print("1. N√©n th∆∞ m·ª•c 'yolo_world_models' th√†nh file .tar.gz ho·∫∑c .zip")
        print("2. Upload l√™n server qua SCP/SFTP:")
        print("   scp -r yolo_world_models/ user@server:/path/to/YOLO-World/")
        print("3. Tr√™n server, di chuy·ªÉn files ƒë·∫øn ƒë√∫ng v·ªã tr√≠:")
        print("   mv yolo_world_models/pretrained_models/* /path/to/YOLO-World/pretrained_models/")
        
        # T·∫°o script upload
        create_upload_script(base_dir)
    else:
        print("\n‚ö†Ô∏è  M·ªôt s·ªë files kh√¥ng t·∫£i ƒë∆∞·ª£c. H√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.")

def create_upload_script(base_dir):
    """T·∫°o script ƒë·ªÉ upload l√™n server"""
    script_content = f"""#!/bin/bash
# Script upload models l√™n server YOLO-World

# C·∫•u h√¨nh server (s·ª≠a theo th√¥ng tin c·ªßa b·∫°n)
SERVER_USER="your_username"
SERVER_HOST="your_server_ip"
SERVER_PATH="/home/quangnh58/Segment_logo/YOLO-World"

echo "üöÄ Uploading YOLO-World models to server..."

# T·∫°o th∆∞ m·ª•c tr√™n server
ssh $SERVER_USER@$SERVER_HOST "mkdir -p $SERVER_PATH/pretrained_models"

# Upload pretrained models
echo "üì§ Uploading pretrained models..."
scp -r {base_dir}/pretrained_models/* $SERVER_USER@$SERVER_HOST:$SERVER_PATH/pretrained_models/

# Ki·ªÉm tra upload
echo "‚úÖ Verifying upload..."
ssh $SERVER_USER@$SERVER_HOST "ls -la $SERVER_PATH/pretrained_models/"

echo "üéâ Upload completed!"
echo "B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y image prompt demo tr√™n server"
"""
    
    script_path = base_dir / "upload_to_server.sh"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    os.chmod(script_path, 0o755)
    print(f"\nüìù ƒê√£ t·∫°o script upload: {script_path}")
    print("   S·ª≠a th√¥ng tin server trong script tr∆∞·ªõc khi ch·∫°y!")

if __name__ == "__main__":
    main()
